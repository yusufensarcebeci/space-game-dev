{"version":3,"sources":["file:///D:/CocosProjects/bionluk/muratcanko/SpaceGame/SpaceGame3D/assets/scripts/UIManager.ts"],"names":["_decorator","Component","Node","GameManager","ccclass","property","UIManager","onPlayButtonClicked","gameManager","getComponent","console","log","handleInitScreen","hideAllScreens","initScreen","active","handleLoading","loadingScreen","handleGameScreen","gameScreen","handleEndScreen","endScreen","rotateLoadSprite","dt","rotZ","load","eulerAngles","z","setRotationFromEuler","update","activity"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;;AACvBC,MAAAA,W,iBAAAA,W;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;2BAGjBM,S,WADZF,OAAO,CAAC,WAAD,C,UAELC,QAAQ,CAACH,IAAD,C,UACRG,QAAQ,CAACH,IAAD,C,UACRG,QAAQ,CAACH,IAAD,C,UACRG,QAAQ,CAACH,IAAD,C,UAERG,QAAQ,CAACH,IAAD,C,2BAPX,MACaI,SADb,SAC+BL,SAD/B,CACyC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAQ/BM,QAAAA,mBAAmB,GAAE;AAC3B,gBAAMC,WAAW,GAAG,KAAKC,YAAL;AAAA;AAAA,yCAApB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ,EAF2B,CAG3B;AACD;;AAEMI,QAAAA,gBAAgB,GAAG;AACxB,eAAKC,cAAL;;AACA,cAAI,KAAKC,UAAT,EAAqB;AACnB,iBAAKA,UAAL,CAAgBC,MAAhB,GAAyB,IAAzB;AACD;AACF;;AAEMC,QAAAA,aAAa,GAAG;AACrB,eAAKH,cAAL;;AACA,cAAI,KAAKI,aAAT,EAAwB;AACtB,iBAAKA,aAAL,CAAmBF,MAAnB,GAA4B,IAA5B;AACD;AACF;;AAEMG,QAAAA,gBAAgB,GAAG;AACxB,eAAKL,cAAL;;AACA,cAAI,KAAKM,UAAT,EAAqB;AACnB,iBAAKA,UAAL,CAAgBJ,MAAhB,GAAyB,IAAzB;AACD;AACF;;AAEMK,QAAAA,eAAe,GAAG;AACvB,eAAKP,cAAL;;AACA,cAAI,KAAKQ,SAAT,EAAoB;AAClB,iBAAKA,SAAL,CAAeN,MAAf,GAAwB,IAAxB;AACD;AACF;;AAEOF,QAAAA,cAAc,GAAG;AACvB,cAAI,KAAKI,aAAT,EAAwB;AACtB,iBAAKA,aAAL,CAAmBF,MAAnB,GAA4B,KAA5B;AACD;;AACD,cAAI,KAAKD,UAAT,EAAqB;AACnB,iBAAKA,UAAL,CAAgBC,MAAhB,GAAyB,KAAzB;AACD;;AACD,cAAI,KAAKI,UAAT,EAAqB;AACnB,iBAAKA,UAAL,CAAgBJ,MAAhB,GAAyB,KAAzB;AACD;;AACD,cAAI,KAAKM,SAAT,EAAoB;AAClB,iBAAKA,SAAL,CAAeN,MAAf,GAAwB,KAAxB;AACD;AACF;;AAEDO,QAAAA,gBAAgB,CAACC,EAAD,EAAa;AAC3B,cAAIC,IAAI,GAAG,KAAKC,IAAL,CAAUC,WAAV,CAAsBC,CAAjC;AACA,eAAKF,IAAL,CAAUG,oBAAV,CAA+B,CAA/B,EAAkC,CAAlC,EAAqCJ,IAAI,GAAGD,EAAE,GAAG,GAAjD;AACD;;AAESM,QAAAA,MAAM,CAACN,EAAD,EAAmB;AACjC,cAAIO,QAAQ,GAAG,KAAKb,aAAL,CAAmBF,MAAlC;;AACA,cAAIe,QAAJ,EAAc;AACZ,iBAAKR,gBAAL,CAAsBC,EAAtB;AACD;AACF;;AAnEsC,O;;;;;iBACD,I;;;;;;;iBACH,I;;;;;;;iBACA,I;;;;;;;iBACD,I;;;;;;;iBAEL,I","sourcesContent":["import { _decorator, Component, Node } from \"cc\";\r\nimport { GameManager, GameState } from \"./GameManager\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"UIManager\")\r\nexport class UIManager extends Component {\r\n  @property(Node) loadingScreen: Node = null;\r\n  @property(Node) initScreen: Node = null;\r\n  @property(Node) gameScreen: Node = null;\r\n  @property(Node) endScreen: Node = null;\r\n\r\n  @property(Node) load: Node = null;\r\n\r\n  private onPlayButtonClicked(){\r\n    const gameManager = this.getComponent(GameManager);\r\n    console.log(gameManager);\r\n    // gameManager.setState(GameState.GAME_START);\r\n  }\r\n\r\n  public handleInitScreen() {\r\n    this.hideAllScreens();\r\n    if (this.initScreen) {\r\n      this.initScreen.active = true;\r\n    }\r\n  }\r\n\r\n  public handleLoading() {\r\n    this.hideAllScreens();\r\n    if (this.loadingScreen) {\r\n      this.loadingScreen.active = true;\r\n    }\r\n  }\r\n\r\n  public handleGameScreen() {\r\n    this.hideAllScreens();\r\n    if (this.gameScreen) {\r\n      this.gameScreen.active = true;\r\n    }\r\n  }\r\n\r\n  public handleEndScreen() {\r\n    this.hideAllScreens();\r\n    if (this.endScreen) {\r\n      this.endScreen.active = true;\r\n    }\r\n  }\r\n\r\n  private hideAllScreens() {\r\n    if (this.loadingScreen) {\r\n      this.loadingScreen.active = false;\r\n    }\r\n    if (this.initScreen) {\r\n      this.initScreen.active = false;\r\n    }\r\n    if (this.gameScreen) {\r\n      this.gameScreen.active = false;\r\n    }\r\n    if (this.endScreen) {\r\n      this.endScreen.active = false;\r\n    }\r\n  }\r\n\r\n  rotateLoadSprite(dt: number) {\r\n    let rotZ = this.load.eulerAngles.z;\r\n    this.load.setRotationFromEuler(0, 0, rotZ - dt * 200);\r\n  }\r\n\r\n  protected update(dt: number): void {\r\n    let activity = this.loadingScreen.active;\r\n    if (activity) {\r\n      this.rotateLoadSprite(dt);\r\n    }\r\n  }\r\n}\r\n"]}